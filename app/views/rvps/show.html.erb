<div class="container mt-4">
  <div class="row">
    <div class="col-md-12">
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h2 class="card-title m-0">RVP Info</h2>
          
          <div class="col-md-auto text-center">
            <span id="proctorStatus" class="text-center <%= @rvp.proctor? ? 'text-success' : 'text-danger' %>" style="margin-right: 75px;">
              <%= @rvp.proctor? ? 'Proctor' : 'Not a Proctor' %>
            </span>
          </div>

          <span class="<%= @rvp.archived? ? 'text-danger' : 'text-success' %>">
            <%= @rvp.archived? ? 'Archived' : 'Active' %>
          </span>
        </div>

        <div class="card-body">
          <%= render @rvp %>
        </div>

        <div class="card-footer">
          <div class="row justify-content-between">
            <div class="col-md-auto">
              <button id="previousPageButton" class="btn btn-secondary">Back To RVPs</button>
            </div>
            <div class="col-md-auto">
              <%= button_to "Toggle Proctor", toggle_proctor_rvp_path(@rvp), method: :put, remote: true, class: "btn btn-primary btn-toggle-proctor" %>
            </div>
            <div class="col-md-auto">
              <% if @rvp.archived? %>
                <%= button_to "Unarchive rvp", rvp_unarchive_path(rvp_id: @rvp.id), method: :post, data: { confirm: "Are you sure?" }, class: "btn btn-danger" %>  
              <% else %>
                <%= button_to "Archive rvp", @rvp, method: :delete, data: { confirm: "Are you sure?" }, class: "btn btn-danger" %>
              <% end %>
            </div>
            <div class="col-md-auto ml-auto">
              <%= link_to "Edit this rvp", edit_rvp_path(@rvp), class: "btn btn-primary" %>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div class="row mt-4">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Not Downloaded</h2>
        </div>
        <div class="card-body">
          <ul class="list-group list-group-flush">
            <%= render partial: "not_downloaded", locals: { pdfs: @pdfs } %>
          </ul>
        </div>
      </div>
    </div>
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title">Downloaded</h2>
        </div>
        <div class="card-body">
          <ul class="list-group list-group-flush">
            <%= render partial: "downloaded", locals: { pdfs: @pdfs } %>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.list-group-flush li {
  list-style: none;
}
</style>

<script>
document.addEventListener("DOMContentLoaded", function() {
  // Handling Back to RVPs button
  document.getElementById("previousPageButton").addEventListener("click", function() {
    history.back();
  });

  // Handling Archive/Unarchive RVP buttons
  document.querySelectorAll(".btn-danger, .btn-archive").forEach(button => {
    button.addEventListener("click", function(event) {
      event.preventDefault(); // Prevent the form from submitting normally

      const url = this.form.action; // Get the form action
      const method = this.form.method; // Get the form method
      const data = new FormData(this.form); // Get the form data
      const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

      fetch(url, {
        method: method,
        body: data,
        headers: {
          'X-CSRF-Token': token
        },
        credentials: 'include'
      }).then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok.');
        }
        return response.text();
      }).then(() => {
        alert('RVP status updated successfully.');
        window.location.reload(); // Reload to reflect changes
      }).catch(error => {
        console.error('Error:', error);
        alert('Failed to update RVP status.');
      });
    });
  });
});

// Handling Toggle Proctor button
document.querySelectorAll(".btn-toggle-proctor").forEach(button => {
  button.addEventListener("click", function(event) {
    event.preventDefault(); // Prevent the form from submitting normally

    const url = this.form.action; // Get the form action
    const method = this.form.method; // Get the form method
    const data = new FormData(this.form); // Get the form data
    const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

    fetch(url, {
      method: method,
      body: data,
      headers: {
        'X-CSRF-Token': token
      },
      credentials: 'include'
    }).then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok.');
      }
      return response.text();
    }).then(() => {
      alert('Proctor status toggled successfully.');
      window.location.reload(); // Reload to reflect changes
    }).catch(error => {
      console.error('Error:', error);
      alert('Failed to toggle proctor status.');
    });
  });
});
</script>